package Utility;

import Models.Appointment;

import java.sql.*;
import java.time.ZoneId;
import java.time.ZonedDateTime;

/**
 * Database Access Object For Appointment
 * @author Luis J. Gimenez
 */
public class AppointmentDB {
  /**
   * Creates a new appointment.
   * @param contactId contact id
   * @param Created_By who created it
   * @param current_date current date
   * @param customerId the customer id
   * @param descriptionFieldText description
   * @param Last_Updated_By last updated time
   * @param localEndTimestamp local time for end
   * @param localStartTimestamp local time for start
   * @param locationFieldText location
   * @param newId new id of appointment autogenerated
   * @param titleFieldText title
   * @param typeFieldText type
   * @param userId the id
   * @param utcEndTime utc
   * @param utcStartTime utc
   * @return new appointment
   * @throws SQLException exception
   */
  public static Appointment makeAppointment(int newId,
                                            String titleFieldText,
                                            String descriptionFieldText,
                                            String locationFieldText,
                                            String typeFieldText,
                                            Timestamp localEndTimestamp,
                                            Timestamp localStartTimestamp,
                                            Timestamp current_date,
                                            int contactId,
                                            Timestamp utcStartTime,
                                            Timestamp utcEndTime,
                                            String Created_By,
                                            String Last_Updated_By,
                                            int customerId,
                                            int userId) throws SQLException {
    String request = "INSERT INTO appointments VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
    PreparedStatement insert = DBConnection.open().prepareStatement(request);
    insert.setInt(1, newId);
    insert.setString(2, titleFieldText);
    insert.setString(3, descriptionFieldText);
    insert.setString(4, locationFieldText);
    insert.setString(5, typeFieldText);
    insert.setTimestamp(6, localStartTimestamp);
    insert.setTimestamp(7, localEndTimestamp);
    insert.setTimestamp(8, current_date);
    insert.setString(9, Created_By);
    insert.setTimestamp(10, current_date);
    insert.setString(11, Last_Updated_By);
    insert.setInt(12, customerId);
    insert.setInt(13, 1);
    insert.setInt(14, contactId);
    try (var ps = insert) {
      ps.executeUpdate();
    }
    Appointment appointment = new Appointment(
            newId,
            titleFieldText,
            descriptionFieldText,
            locationFieldText,
            typeFieldText,
            contactId,
            utcStartTime,
            utcEndTime,
            current_date,
            Created_By,
            current_date,
            Last_Updated_By,
            customerId,
            userId);
    appointment.setLocalStart(localStartTimestamp);
    appointment.setLocalEnd(localEndTimestamp);
    appointment.setFormattedLocalStart(localStartTimestamp);
    appointment.setFormattedLocalEnd(localEndTimestamp);
    DBConnection.close();
    return appointment;
  }
  /**
   * Validates if appointment is within available times.
   * @param appointmentId specific appointment
   * @param customerId id of who created it
   * @param utcEnd the end time
   * @param utcStart the start time
   * @return true or false
   * @throws SQLException if unsuccessful
   */
  public static boolean validate(Timestamp utcStart, Timestamp utcEnd, int customerId, int appointmentId) throws SQLException {
    ZonedDateTime UtcStart = ZonedDateTime.of(utcStart.toLocalDateTime(), ZoneId.of("UTC"));
    ZonedDateTime UtcEnd = ZonedDateTime.of(utcEnd.toLocalDateTime(), ZoneId.of("UTC"));
    String sql = "SELECT * FROM appointments WHERE Customer_ID = '"+customerId+"' AND Appointment_ID != '"+appointmentId+"';";
    Statement statement = DBConnection.open().createStatement();
    ResultSet resultSet = statement.executeQuery(sql);
    String start = "";
    String end = "";
    while (resultSet.next()) {
      start = resultSet.getString("Start");
      end = resultSet.getString("End");
      ZonedDateTime UTCCustomerStart = ZonedDateTime.of(Timestamp.valueOf(start).toLocalDateTime(), ZoneId.of("UTC"));
      ZonedDateTime UTCCustomerEnd = ZonedDateTime.of(Timestamp.valueOf(end).toLocalDateTime(), ZoneId.of("UTC"));
      if (UtcStart.isBefore(UTCCustomerEnd) && UtcEnd.isAfter(UTCCustomerStart) || UtcStart.isEqual(UTCCustomerStart) || UtcEnd.isEqual(UTCCustomerEnd))
      {
        DBConnection.close();
        return false;
      }
    }
    DBConnection.close();
    return true;
  }
}